/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root"
import { Route as SetupRouteImport } from "./routes/setup"
import { Route as LoginRouteImport } from "./routes/login"
import { Route as IndexRouteImport } from "./routes/index"
import { Route as FilesIndexRouteImport } from "./routes/files.index"
import { Route as FilesSplatRouteImport } from "./routes/files.$"
import { Route as FilesPreviewDirectoryIdPathRouteImport } from "./routes/files.preview.$directoryId.$path"

const SetupRoute = SetupRouteImport.update({
  id: "/setup",
  path: "/setup",
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any)
const FilesIndexRoute = FilesIndexRouteImport.update({
  id: "/files/",
  path: "/files/",
  getParentRoute: () => rootRouteImport,
} as any)
const FilesSplatRoute = FilesSplatRouteImport.update({
  id: "/files/$",
  path: "/files/$",
  getParentRoute: () => rootRouteImport,
} as any)
const FilesPreviewDirectoryIdPathRoute =
  FilesPreviewDirectoryIdPathRouteImport.update({
    id: "/files/preview/$directoryId/$path",
    path: "/files/preview/$directoryId/$path",
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute
  "/login": typeof LoginRoute
  "/setup": typeof SetupRoute
  "/files/$": typeof FilesSplatRoute
  "/files": typeof FilesIndexRoute
  "/files/preview/$directoryId/$path": typeof FilesPreviewDirectoryIdPathRoute
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute
  "/login": typeof LoginRoute
  "/setup": typeof SetupRoute
  "/files/$": typeof FilesSplatRoute
  "/files": typeof FilesIndexRoute
  "/files/preview/$directoryId/$path": typeof FilesPreviewDirectoryIdPathRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  "/": typeof IndexRoute
  "/login": typeof LoginRoute
  "/setup": typeof SetupRoute
  "/files/$": typeof FilesSplatRoute
  "/files/": typeof FilesIndexRoute
  "/files/preview/$directoryId/$path": typeof FilesPreviewDirectoryIdPathRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | "/"
    | "/login"
    | "/setup"
    | "/files/$"
    | "/files"
    | "/files/preview/$directoryId/$path"
  fileRoutesByTo: FileRoutesByTo
  to:
    | "/"
    | "/login"
    | "/setup"
    | "/files/$"
    | "/files"
    | "/files/preview/$directoryId/$path"
  id:
    | "__root__"
    | "/"
    | "/login"
    | "/setup"
    | "/files/$"
    | "/files/"
    | "/files/preview/$directoryId/$path"
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  SetupRoute: typeof SetupRoute
  FilesSplatRoute: typeof FilesSplatRoute
  FilesIndexRoute: typeof FilesIndexRoute
  FilesPreviewDirectoryIdPathRoute: typeof FilesPreviewDirectoryIdPathRoute
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/setup": {
      id: "/setup"
      path: "/setup"
      fullPath: "/setup"
      preLoaderRoute: typeof SetupRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/login": {
      id: "/login"
      path: "/login"
      fullPath: "/login"
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/files/": {
      id: "/files/"
      path: "/files"
      fullPath: "/files"
      preLoaderRoute: typeof FilesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/files/$": {
      id: "/files/$"
      path: "/files/$"
      fullPath: "/files/$"
      preLoaderRoute: typeof FilesSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/files/preview/$directoryId/$path": {
      id: "/files/preview/$directoryId/$path"
      path: "/files/preview/$directoryId/$path"
      fullPath: "/files/preview/$directoryId/$path"
      preLoaderRoute: typeof FilesPreviewDirectoryIdPathRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  SetupRoute: SetupRoute,
  FilesSplatRoute: FilesSplatRoute,
  FilesIndexRoute: FilesIndexRoute,
  FilesPreviewDirectoryIdPathRoute: FilesPreviewDirectoryIdPathRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
